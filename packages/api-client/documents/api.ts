/* tslint:disable */
/* eslint-disable */
/**
 * Documents Service
 * Documents Service api documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Comments
 */
export interface Comments {
    /**
     * id of the comment
     * @type {string}
     * @memberof Comments
     */
    'id': string;
    /**
     * Comment user username
     * @type {string}
     * @memberof Comments
     */
    'username': string;
    /**
     * Comment user Image
     * @type {string}
     * @memberof Comments
     */
    'img': string;
    /**
     * Comment user id
     * @type {string}
     * @memberof Comments
     */
    'userId': string;
    /**
     * Comment content
     * @type {string}
     * @memberof Comments
     */
    'commentContent': string;
}
/**
 * 
 * @export
 * @interface CreateCommentRequestDTO
 */
export interface CreateCommentRequestDTO {
    /**
     * comment content
     * @type {string}
     * @memberof CreateCommentRequestDTO
     */
    'content': string;
    /**
     * document id
     * @type {string}
     * @memberof CreateCommentRequestDTO
     */
    'documentId': string;
}
/**
 * 
 * @export
 * @interface CreateDocumentRequestDTO
 */
export interface CreateDocumentRequestDTO {
    /**
     * User id
     * @type {string}
     * @memberof CreateDocumentRequestDTO
     */
    'userId': string;
    /**
     * Project id
     * @type {string}
     * @memberof CreateDocumentRequestDTO
     */
    'projectId': string;
    /**
     * Document type
     * @type {string}
     * @memberof CreateDocumentRequestDTO
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface DeleteCommentResDTO
 */
export interface DeleteCommentResDTO {
    /**
     * Comment id
     * @type {string}
     * @memberof DeleteCommentResDTO
     */
    'commentId': string;
}
/**
 * 
 * @export
 * @interface DeleteDocumentResDTO
 */
export interface DeleteDocumentResDTO {
    /**
     * document id
     * @type {string}
     * @memberof DeleteDocumentResDTO
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface DocumentResponseDTO
 */
export interface DocumentResponseDTO {
    /**
     * Document id
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    '_id': string;
    /**
     * 
     * @type {DocumentResponseDTOUserInfo}
     * @memberof DocumentResponseDTO
     */
    'userInfo': DocumentResponseDTOUserInfo;
    /**
     * 
     * @type {DocumentResponseDTOProjectInfo}
     * @memberof DocumentResponseDTO
     */
    'projectInfo': DocumentResponseDTOProjectInfo;
    /**
     * Document name
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    'name': string;
    /**
     * Document type
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    'type': string;
    /**
     * Document description
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    'content': string;
    /**
     * Document wordCount
     * @type {number}
     * @memberof DocumentResponseDTO
     */
    'wordCount': number;
    /**
     * Document share status
     * @type {boolean}
     * @memberof DocumentResponseDTO
     */
    'shared': boolean;
    /**
     * Document comments
     * @type {Array<Comments>}
     * @memberof DocumentResponseDTO
     */
    'comments': Array<Comments>;
    /**
     * Document likes
     * @type {Array<Likes>}
     * @memberof DocumentResponseDTO
     */
    'likes': Array<Likes>;
    /**
     * Date document created at
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    'createdAt': string;
    /**
     * Date document was last updated
     * @type {string}
     * @memberof DocumentResponseDTO
     */
    'updatedAt': string;
}
/**
 * Project info
 * @export
 * @interface DocumentResponseDTOProjectInfo
 */
export interface DocumentResponseDTOProjectInfo {
    /**
     * Project ID
     * @type {string}
     * @memberof DocumentResponseDTOProjectInfo
     */
    'projectId': string;
    /**
     * Project name
     * @type {string}
     * @memberof DocumentResponseDTOProjectInfo
     */
    'name': string;
    /**
     * Project Image
     * @type {string}
     * @memberof DocumentResponseDTOProjectInfo
     */
    'img': string;
    /**
     * Project Genre
     * @type {string}
     * @memberof DocumentResponseDTOProjectInfo
     */
    'genre': string;
}
/**
 * User info
 * @export
 * @interface DocumentResponseDTOUserInfo
 */
export interface DocumentResponseDTOUserInfo {
    /**
     * User ID
     * @type {string}
     * @memberof DocumentResponseDTOUserInfo
     */
    'userId': string;
    /**
     * Username
     * @type {string}
     * @memberof DocumentResponseDTOUserInfo
     */
    'username': string;
    /**
     * User Image
     * @type {string}
     * @memberof DocumentResponseDTOUserInfo
     */
    'img': string;
}
/**
 * @type DocumentsControllerGetFeedFriendsDocumentsIdParameter
 * @export
 */
export type DocumentsControllerGetFeedFriendsDocumentsIdParameter = number | string;

/**
 * 
 * @export
 * @interface GetAllProjectDocumentsDTO
 */
export interface GetAllProjectDocumentsDTO {
    /**
     * Documents
     * @type {Array<DocumentResponseDTO>}
     * @memberof GetAllProjectDocumentsDTO
     */
    'documents': Array<DocumentResponseDTO>;
}
/**
 * 
 * @export
 * @interface Likes
 */
export interface Likes {
    /**
     * Like user username
     * @type {string}
     * @memberof Likes
     */
    'username': string;
    /**
     * Like user Image
     * @type {string}
     * @memberof Likes
     */
    'img': string;
    /**
     * Like user id
     * @type {string}
     * @memberof Likes
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ProjectInfo
 */
export interface ProjectInfo {
    /**
     * Project ID
     * @type {string}
     * @memberof ProjectInfo
     */
    'projectId': string;
    /**
     * Project name
     * @type {string}
     * @memberof ProjectInfo
     */
    'name': string;
    /**
     * Project Image
     * @type {string}
     * @memberof ProjectInfo
     */
    'img': string;
    /**
     * Project Genre
     * @type {string}
     * @memberof ProjectInfo
     */
    'genre': string;
}
/**
 * 
 * @export
 * @interface UpdateDocumentRequestDTO
 */
export interface UpdateDocumentRequestDTO {
    /**
     * Document name
     * @type {string}
     * @memberof UpdateDocumentRequestDTO
     */
    'name'?: string;
    /**
     * Document description
     * @type {string}
     * @memberof UpdateDocumentRequestDTO
     */
    'content'?: string;
    /**
     * Document wordCount
     * @type {number}
     * @memberof UpdateDocumentRequestDTO
     */
    'wordCount'?: number;
    /**
     * Project share status
     * @type {boolean}
     * @memberof UpdateDocumentRequestDTO
     */
    'shared'?: boolean;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * User ID
     * @type {string}
     * @memberof UserInfo
     */
    'userId': string;
    /**
     * Username
     * @type {string}
     * @memberof UserInfo
     */
    'username': string;
    /**
     * User Image
     * @type {string}
     * @memberof UserInfo
     */
    'img': string;
}

/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {CreateCommentRequestDTO} createCommentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerAddComment: async (userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, createCommentRequestDTO: CreateCommentRequestDTO, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('documentsControllerAddComment', 'userId', userId)
            // verify required parameter 'createCommentRequestDTO' is not null or undefined
            assertParamExists('documentsControllerAddComment', 'createCommentRequestDTO', createCommentRequestDTO)
            const localVarPath = `/api/documents/document/comment/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerAddRemoveLike: async (userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('documentsControllerAddRemoveLike', 'userId', userId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsControllerAddRemoveLike', 'documentId', documentId)
            const localVarPath = `/api/documents/document/like/{documentId}/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerCreateDocument: async (createDocumentRequestDTO: CreateDocumentRequestDTO, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDocumentRequestDTO' is not null or undefined
            assertParamExists('documentsControllerCreateDocument', 'createDocumentRequestDTO', createDocumentRequestDTO)
            const localVarPath = `/api/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} commentId string for the comment id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerDeleteComment: async (commentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('documentsControllerDeleteComment', 'commentId', commentId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsControllerDeleteComment', 'documentId', documentId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('documentsControllerDeleteComment', 'userId', userId)
            const localVarPath = `/api/documents/document/comment/delete/{userId}/{documentId}/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)))
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the project id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerDeleteDocument: async (id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentsControllerDeleteDocument', 'id', id)
            const localVarPath = `/api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetAllProjectDocuments: async (id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentsControllerGetAllProjectDocuments', 'id', id)
            const localVarPath = `/api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetAllUserDocuments: async (id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentsControllerGetAllUserDocuments', 'id', id)
            const localVarPath = `/api/documents/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetDocumentById: async (documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('documentsControllerGetDocumentById', 'documentId', documentId)
            const localVarPath = `/api/documents/document/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetFeedDocuments: async (documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetFeedFriendsDocuments: async (id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentsControllerGetFeedFriendsDocuments', 'id', id)
            const localVarPath = `/api/documents/friends/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerUpdateDocument: async (id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, updateDocumentRequestDTO: UpdateDocumentRequestDTO, documentsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('documentsControllerUpdateDocument', 'id', id)
            // verify required parameter 'updateDocumentRequestDTO' is not null or undefined
            assertParamExists('documentsControllerUpdateDocument', 'updateDocumentRequestDTO', updateDocumentRequestDTO)
            const localVarPath = `/api/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsAPI != null) {
                localVarHeaderParameter['Documents-API'] = String(documentsAPI);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDocumentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {CreateCommentRequestDTO} createCommentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerAddComment(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, createCommentRequestDTO: CreateCommentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerAddComment(userId, createCommentRequestDTO, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerAddRemoveLike(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerAddRemoveLike(userId, documentId, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerCreateDocument(createDocumentRequestDTO: CreateDocumentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerCreateDocument(createDocumentRequestDTO, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} commentId string for the comment id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerDeleteComment(commentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCommentResDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerDeleteComment(commentId, documentId, userId, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the project id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerDeleteDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDocumentResDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerDeleteDocument(id, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerGetAllProjectDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllProjectDocumentsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerGetAllProjectDocuments(id, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerGetAllUserDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllProjectDocumentsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerGetAllUserDocuments(id, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerGetDocumentById(documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerGetDocumentById(documentId, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerGetFeedDocuments(documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllProjectDocumentsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerGetFeedDocuments(documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerGetFeedFriendsDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllProjectDocumentsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerGetFeedFriendsDocuments(id, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsControllerUpdateDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, updateDocumentRequestDTO: UpdateDocumentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.documentsControllerUpdateDocument(id, updateDocumentRequestDTO, documentsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {CreateCommentRequestDTO} createCommentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerAddComment(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, createCommentRequestDTO: CreateCommentRequestDTO, documentsAPI?: string, options?: any): AxiosPromise<DocumentResponseDTO> {
            return localVarFp.documentsControllerAddComment(userId, createCommentRequestDTO, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerAddRemoveLike(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<DocumentResponseDTO> {
            return localVarFp.documentsControllerAddRemoveLike(userId, documentId, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerCreateDocument(createDocumentRequestDTO: CreateDocumentRequestDTO, documentsAPI?: string, options?: any): AxiosPromise<DocumentResponseDTO> {
            return localVarFp.documentsControllerCreateDocument(createDocumentRequestDTO, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} commentId string for the comment id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerDeleteComment(commentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<DeleteCommentResDTO> {
            return localVarFp.documentsControllerDeleteComment(commentId, documentId, userId, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the project id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerDeleteDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<DeleteDocumentResDTO> {
            return localVarFp.documentsControllerDeleteDocument(id, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetAllProjectDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<GetAllProjectDocumentsDTO> {
            return localVarFp.documentsControllerGetAllProjectDocuments(id, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetAllUserDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<GetAllProjectDocumentsDTO> {
            return localVarFp.documentsControllerGetAllUserDocuments(id, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetDocumentById(documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<DocumentResponseDTO> {
            return localVarFp.documentsControllerGetDocumentById(documentId, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetFeedDocuments(documentsAPI?: string, options?: any): AxiosPromise<GetAllProjectDocumentsDTO> {
            return localVarFp.documentsControllerGetFeedDocuments(documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerGetFeedFriendsDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: any): AxiosPromise<GetAllProjectDocumentsDTO> {
            return localVarFp.documentsControllerGetFeedFriendsDocuments(id, documentsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
         * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
         * @param {string} [documentsAPI] Documents related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsControllerUpdateDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, updateDocumentRequestDTO: UpdateDocumentRequestDTO, documentsAPI?: string, options?: any): AxiosPromise<DocumentResponseDTO> {
            return localVarFp.documentsControllerUpdateDocument(id, updateDocumentRequestDTO, documentsAPI, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
     * @param {CreateCommentRequestDTO} createCommentRequestDTO 
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerAddComment(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, createCommentRequestDTO: CreateCommentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerAddComment(userId, createCommentRequestDTO, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerAddRemoveLike(userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerAddRemoveLike(userId, documentId, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateDocumentRequestDTO} createDocumentRequestDTO 
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerCreateDocument(createDocumentRequestDTO: CreateDocumentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerCreateDocument(createDocumentRequestDTO, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} commentId string for the comment id
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} userId string for the user id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerDeleteComment(commentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, userId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerDeleteComment(commentId, documentId, userId, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the project id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerDeleteDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerDeleteDocument(id, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerGetAllProjectDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerGetAllProjectDocuments(id, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerGetAllUserDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerGetAllUserDocuments(id, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} documentId string for the document id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerGetDocumentById(documentId: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerGetDocumentById(documentId, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerGetFeedDocuments(documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerGetFeedDocuments(documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the user id
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerGetFeedFriendsDocuments(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerGetFeedFriendsDocuments(id, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocumentsControllerGetFeedFriendsDocumentsIdParameter} id string for the document id
     * @param {UpdateDocumentRequestDTO} updateDocumentRequestDTO 
     * @param {string} [documentsAPI] Documents related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public documentsControllerUpdateDocument(id: DocumentsControllerGetFeedFriendsDocumentsIdParameter, updateDocumentRequestDTO: UpdateDocumentRequestDTO, documentsAPI?: string, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).documentsControllerUpdateDocument(id, updateDocumentRequestDTO, documentsAPI, options).then((request) => request(this.axios, this.basePath));
    }
}


