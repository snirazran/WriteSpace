/* tslint:disable */
/* eslint-disable */
/**
 * Projects Service
 * Projects Service api documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateProjectRequestDTO
 */
export interface CreateProjectRequestDTO {
    /**
     * 
     * @type {object}
     * @memberof CreateProjectRequestDTO
     */
    'userId': object;
    /**
     * Project genre
     * @type {string}
     * @memberof CreateProjectRequestDTO
     */
    'genre': string;
}
/**
 * 
 * @export
 * @interface DeleteProjectResDTO
 */
export interface DeleteProjectResDTO {
    /**
     * project id
     * @type {string}
     * @memberof DeleteProjectResDTO
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GetAllUserProjectsDTO
 */
export interface GetAllUserProjectsDTO {
    /**
     * Projects
     * @type {Array<string>}
     * @memberof GetAllUserProjectsDTO
     */
    'projects': Array<string>;
}
/**
 * 
 * @export
 * @interface ProjectResponseDTO
 */
export interface ProjectResponseDTO {
    /**
     * Project id
     * @type {string}
     * @memberof ProjectResponseDTO
     */
    '_id': string;
    /**
     * 
     * @type {object}
     * @memberof ProjectResponseDTO
     */
    'userId': object;
    /**
     * Project name
     * @type {string}
     * @memberof ProjectResponseDTO
     */
    'name': string;
    /**
     * Project img
     * @type {string}
     * @memberof ProjectResponseDTO
     */
    'img': string;
    /**
     * Project genre
     * @type {string}
     * @memberof ProjectResponseDTO
     */
    'genre': string;
    /**
     * Project description
     * @type {string}
     * @memberof ProjectResponseDTO
     */
    'description': string;
    /**
     * Project share status
     * @type {boolean}
     * @memberof ProjectResponseDTO
     */
    'shared': boolean;
}
/**
 * @type ProjectsControllerGetAllUserProjectsIdParameter
 * @export
 */
export type ProjectsControllerGetAllUserProjectsIdParameter = number | string;

/**
 * 
 * @export
 * @interface UpdateProjectRequestDTO
 */
export interface UpdateProjectRequestDTO {
    /**
     * Project name
     * @type {string}
     * @memberof UpdateProjectRequestDTO
     */
    'name': string;
    /**
     * Project img
     * @type {string}
     * @memberof UpdateProjectRequestDTO
     */
    'img': string;
    /**
     * Project description
     * @type {string}
     * @memberof UpdateProjectRequestDTO
     */
    'description': string;
    /**
     * Project share status
     * @type {boolean}
     * @memberof UpdateProjectRequestDTO
     */
    'shared': boolean;
}

/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectRequestDTO} createProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerCreateProject: async (createProjectRequestDTO: CreateProjectRequestDTO, projectsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectRequestDTO' is not null or undefined
            assertParamExists('projectsControllerCreateProject', 'createProjectRequestDTO', createProjectRequestDTO)
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectsAPI != null) {
                localVarHeaderParameter['Projects-API'] = String(projectsAPI);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerDeleteProject: async (id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerDeleteProject', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectsAPI != null) {
                localVarHeaderParameter['Projects-API'] = String(projectsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the user id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerGetAllUserProjects: async (id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerGetAllUserProjects', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectsAPI != null) {
                localVarHeaderParameter['Projects-API'] = String(projectsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} projectId string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerGetUserProjectById: async (projectId: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectsControllerGetUserProjectById', 'projectId', projectId)
            const localVarPath = `/api/projects/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectsAPI != null) {
                localVarHeaderParameter['Projects-API'] = String(projectsAPI);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerUpdateProject: async (id: ProjectsControllerGetAllUserProjectsIdParameter, updateProjectRequestDTO: UpdateProjectRequestDTO, projectsAPI?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsControllerUpdateProject', 'id', id)
            // verify required parameter 'updateProjectRequestDTO' is not null or undefined
            assertParamExists('projectsControllerUpdateProject', 'updateProjectRequestDTO', updateProjectRequestDTO)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectsAPI != null) {
                localVarHeaderParameter['Projects-API'] = String(projectsAPI);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectRequestDTO} createProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerCreateProject(createProjectRequestDTO: CreateProjectRequestDTO, projectsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerCreateProject(createProjectRequestDTO, projectsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerDeleteProject(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProjectResDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerDeleteProject(id, projectsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the user id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerGetAllUserProjects(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllUserProjectsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerGetAllUserProjects(id, projectsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} projectId string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerGetUserProjectById(projectId: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerGetUserProjectById(projectId, projectsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsControllerUpdateProject(id: ProjectsControllerGetAllUserProjectsIdParameter, updateProjectRequestDTO: UpdateProjectRequestDTO, projectsAPI?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerUpdateProject(id, updateProjectRequestDTO, projectsAPI, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectRequestDTO} createProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerCreateProject(createProjectRequestDTO: CreateProjectRequestDTO, projectsAPI?: string, options?: any): AxiosPromise<ProjectResponseDTO> {
            return localVarFp.projectsControllerCreateProject(createProjectRequestDTO, projectsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerDeleteProject(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: any): AxiosPromise<DeleteProjectResDTO> {
            return localVarFp.projectsControllerDeleteProject(id, projectsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the user id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerGetAllUserProjects(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: any): AxiosPromise<GetAllUserProjectsDTO> {
            return localVarFp.projectsControllerGetAllUserProjects(id, projectsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} projectId string for the project id
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerGetUserProjectById(projectId: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: any): AxiosPromise<ProjectResponseDTO> {
            return localVarFp.projectsControllerGetUserProjectById(projectId, projectsAPI, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
         * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
         * @param {string} [projectsAPI] Projects related endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsControllerUpdateProject(id: ProjectsControllerGetAllUserProjectsIdParameter, updateProjectRequestDTO: UpdateProjectRequestDTO, projectsAPI?: string, options?: any): AxiosPromise<ProjectResponseDTO> {
            return localVarFp.projectsControllerUpdateProject(id, updateProjectRequestDTO, projectsAPI, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectRequestDTO} createProjectRequestDTO 
     * @param {string} [projectsAPI] Projects related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerCreateProject(createProjectRequestDTO: CreateProjectRequestDTO, projectsAPI?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerCreateProject(createProjectRequestDTO, projectsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
     * @param {string} [projectsAPI] Projects related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerDeleteProject(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerDeleteProject(id, projectsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the user id
     * @param {string} [projectsAPI] Projects related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerGetAllUserProjects(id: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerGetAllUserProjects(id, projectsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectsControllerGetAllUserProjectsIdParameter} projectId string for the project id
     * @param {string} [projectsAPI] Projects related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerGetUserProjectById(projectId: ProjectsControllerGetAllUserProjectsIdParameter, projectsAPI?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerGetUserProjectById(projectId, projectsAPI, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectsControllerGetAllUserProjectsIdParameter} id string for the project id
     * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
     * @param {string} [projectsAPI] Projects related endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsControllerUpdateProject(id: ProjectsControllerGetAllUserProjectsIdParameter, updateProjectRequestDTO: UpdateProjectRequestDTO, projectsAPI?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsControllerUpdateProject(id, updateProjectRequestDTO, projectsAPI, options).then((request) => request(this.axios, this.basePath));
    }
}


